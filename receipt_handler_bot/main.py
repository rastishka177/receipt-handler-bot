
import os
from aiogram import Bot
from aiogram import Dispatcher
from aiogram import types
from aiogram import  Router
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import KeyboardButton
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram import F
from receipt_handler_bot.google_sheets import add_receipt
from receipt_handler_bot.google_sheets import generate_report_excel
import time
from yandex_disk import upload_file
from utils import generate_receipt_code
from utils import  get_current_date
from receipt_handler_bot.config import BOT_TOKEN, TEMP_DIR

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# /start
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?")
    user_data[message.from_user.id] = {}


# –∫–æ–º–∞–Ω–¥–∞ /report
@router.message(Command("report"))
async def send_report(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data or 'department' not in user_data[user_id]:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —á–µ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω!")
        return

    department = user_data[user_id]['department']
    timestamp = int(time.time())
    report_filename = f"{department}_report_{timestamp}.xlsx"
    report_path = os.path.join(TEMP_DIR, report_filename)

    success = generate_report_excel(department, report_path)
    if not success:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–µ—Ö–∞ {department}.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(types.FSInputFile(report_path), caption=f"üìä –û—Ç—á–µ—Ç –¥–ª—è —Ü–µ—Ö–∞ {department}")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    os.remove(report_path)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ª—é–±–æ–µ)
@router.message(lambda m: m.from_user.id in user_data and 'project' not in user_data[m.from_user.id])
async def get_project(message: types.Message):
    user_data[message.from_user.id]['project'] = message.text

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è")],
            [KeyboardButton(text="–ì—Ä–∏–º–µ—Ä–Ω—ã–π —Ü–µ—Ö")],
            [KeyboardButton(text="–†–µ–∫–≤–∏–∑–∏—Ç–æ—Ä—Å–∫–∏–π —Ü–µ—Ö")],
            [KeyboardButton(text="–ö–æ—Å—Ç—é–º–µ—Ä–Ω—ã–π —Ü–µ—Ö")],
            [KeyboardButton(text="–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–π —Ü–µ—Ö –≤—ã–±–∏—Ä–∞–µ—Ç–µ?", reply_markup=kb)

# –¶–µ—Ö
# –í—ã–±–æ—Ä —Ü–µ—Ö–∞
@router.message(lambda m: m.text in [
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ì—Ä–∏–º–µ—Ä–Ω—ã–π —Ü–µ—Ö", "–†–µ–∫–≤–∏–∑–∏—Ç–æ—Ä—Å–∫–∏–π —Ü–µ—Ö",
    "–ö–æ—Å—Ç—é–º–µ—Ä–Ω—ã–π —Ü–µ—Ö", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö"
])
async def get_department(message: types.Message):
    user_data[message.from_user.id]['department'] = message.text

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢—Ä–∞—Ç–∞")],
            [KeyboardButton(text="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é: —Ç—Ä–∞—Ç–∞ –∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ?", reply_markup=kb)

# –¢—Ä–∞—Ç–∞ –∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@router.message(lambda m: 'operation' not in user_data[m.from_user.id])
async def get_operation(message: types.Message):
    user_data[message.from_user.id]['operation'] = message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∫—É–ø–∫–∞ –∞–ø—Ç–µ—á–∫–∏ 26.05'")

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@router.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    caption = message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    user_data[user_id]['description'] = caption

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    local_file_name = f"{file_id}.jpg"
    local_path = os.path.join(TEMP_DIR, local_file_name)
    await bot.download_file(file_path, local_path)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    project_code = ''.join(filter(str.isalpha, user_data[user_id]['project'].upper()))[:3]
    department_code = ''.join(filter(str.isalpha, user_data[user_id]['department'].upper()))[:2]
    receipt_code = generate_receipt_code(project_code, department_code, user_id % 1000)
    user_data[user_id]['receipt_code'] = receipt_code

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_data[user_id]['local_path'] = local_path

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫:\n"
        f"–ü—Ä–æ–µ–∫—Ç: {user_data[user_id]['project']}\n"
        f"–¶–µ—Ö: {user_data[user_id]['department']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {user_data[user_id]['operation']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {caption}\n"
        f"–ö–æ–¥ —á–µ–∫–∞: {receipt_code}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    # –ö–Ω–æ–ø–∫–∏ –û–ö –∏ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ß–ï–ö
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–ö"), KeyboardButton(text="–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ß–ï–ö")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(lambda m: m.text in ["–û–ö", "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ß–ï–ö"])
async def handle_check_confirmation(message: types.Message):
    user_id = message.from_user.id
    choice = message.text

    if choice == "–û–ö":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        local_path = user_data[user_id].get('local_path')
        receipt_code = user_data[user_id]['receipt_code']
        remote_path = f"/{user_data[user_id]['project']}/{user_data[user_id]['department']}/{receipt_code}.jpg"
        link = upload_file(local_path, remote_path)
        user_data[user_id]['photo_link'] = link

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        current_date = get_current_date()
        data_row = [
            receipt_code,
            current_date,
            user_data[user_id]['operation'],
            user_data[user_id]['description'],
            link
        ]
        add_receipt(user_data[user_id]['department'], data_row)

        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(local_path):
            os.remove(local_path)

        await message.answer(f"‚úÖ –ß–µ–∫ {receipt_code} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!", reply_markup=ReplyKeyboardRemove())
        user_data.pop(user_id, None)  # –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    elif choice == "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ß–ï–ö":
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        local_path = user_data[user_id].get('local_path')
        if local_path and os.path.exists(local_path):
            os.remove(local_path)

        user_data.pop(user_id, None)  # –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?", reply_markup=ReplyKeyboardRemove())

# fallback
@router.message()
async def fallback(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ.")

# –ó–∞–ø—É—Å–∫
async def main():
    if not os.path.exists(TEMP_DIR):
        os.makedirs(TEMP_DIR)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
